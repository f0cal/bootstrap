name: saltbox.f0cal.project

formulas:

  - name: install
    descr: "Expose to stateful salt workflows"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _orch.does_not_exist_on_purpose \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"

  - name: all
    descr: "[init, clone, env]"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _orch.all \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: ["-u", "--git-url"]

  - name: init
    descr: "Clones the project.yml at {code_dir}"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _states.project \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: ["-u", "--git-url"]

  - name: git-clone
    descr: "Walks on project.yml and populates the project sources accordingly"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _states.clone \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: ["-u", "--git-url"]
      - name: ["--https-user"]
        default: None
      - name: ["--https-pass"]
        default: None
        type: "lambda _pass: __import__('getpass').getpass('git password?') if _pass == '-' else _pass"

  - name: git-cmd
    descr: "Walks on project.yml and runs 'git {git_args}' on all repos"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _states.git \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: git_args
        nargs: "..." # This is == argparse.REMAINDER
        type: "lambda argstr: __import__('shlex').quote(argstr) if 'push' not in argstr else ValueError(argstr)"

  - name: env
    descr: "Walks on project.yml and populates the build environment"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _states.env \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: ["-e", "--env"]
        default: dev
      - name: ["-p", "--project-yaml"]

  - name: git-push
    descr: "Push all branches; update project.yml with commit hashes; push project.yml"
    config:
      master: False
      minion: False
    template: |
      salt-call \
        --local \
        --retcode-passthrough \
        state.sls _states.push \
        saltenv={{ saltbox.formula.saltenv }} \
        pillar='{{ {"cli": saltbox.cli} | tojson() }}'
    saltenv: saltbox.f0cal.project
    args:
      - name: code_dir
        type: "__import__('os').path.abspath"
      - name: ['-m', '--message']
        required: True
      - name: ["--https-user"]
        default: None
      - name: ["--https-pass"]
        default: None
        type: "lambda _pass: __import__('getpass').getpass('git password?') if _pass == '-' else _pass"
